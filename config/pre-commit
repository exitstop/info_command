#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".


# ---------------------------------------------------------------------
# Проверяем размер файла ----------------------------------------------
# ---------------------------------------------------------------------
# This is a pre-commit hook that ensures attempts to commit files that are
# are larger than $limit to your _local_ repo fail, with a helpful error message.

# Maximum file size limit in bytes
limit=100 # 100KB
limitInMB=$(( $limit ))

# Move to the repo root so git files paths make sense
repo_root=$( git rev-parse --show-toplevel )
cd $repo_root

empty_tree=$( git hash-object -t tree /dev/null )

if git rev-parse --verify HEAD > /dev/null 2>&1
then
    against=HEAD
else
    against="$empty_tree"
fi

# Set split so that for loop below can handle spaces in file names by splitting on line breaks
IFS='
'

echo "Checking staged file sizes"
shouldFail=false

INPUT_FILE=$( git diff-index --cached --name-only $against );


check_size ()
{
    arg_0="$@"
    for file in $arg_0; do
        DU=$( du -a $file )
        file_size=$(echo $DU | awk '{ print $1 }')
        file_name=$(echo $DU | awk '{ print $2 }')
        if [ -d $file_name ]; then
            check_size $file_name
        else
            if [ "$file_size" -gt  "$limit" ]; then
                echo "[\e[31mDANGER\e[0m] File \e[32m$file\e[0m is \e[31m$(( $file_size ))\e[0mKB, \
                    which is larger than our configured limit of \e[32m$limitInMB\e[0mKB"
                                    shouldFail=true
            fi
        fi
    done
}

check_size $INPUT_FILE

if $shouldFail
then
    echo If you really need to commit this file, you can push with the --no-verify switch, but the file should definitely, definitely be under 100KB!!!
    echo Commit aborted
    exit 1;
fi

# ---------------------------------------------------------------------
# Запускаем линтер только на новых коммитах ---------------------------
# ---------------------------------------------------------------------

golangci-lint run --fix -new
if [ $? -eq 0 ]; then echo "[\e[32mOK\e[0m] OK lint "; \
else echo "[\e[31mERROR\e[0m] failt lint " >&2; exit 1; fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
        LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
        then
            cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


